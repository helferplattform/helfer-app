{"version":3,"sources":["src/repository/repository.ts","src/features/new-incident/components/CurrentHelperNumber.tsx","src/features/new-incident/components/CurrentHelperNumberCircle.tsx","src/features/new-incident/components/MessageInfoBox.tsx","src/features/new-incident/components/RolesPicker.tsx","src/features/new-incident/components/SkillsPicker.tsx","src/features/new-incident/components/SectionHeadline.tsx","src/features/new-incident/components/FieldWithHeading.tsx","src/features/new-incident/components/AdressMapView.tsx","src/features/new-incident/components/SubmitButton.tsx","src/features/new-incident/components/DateInput.tsx","src/features/new-incident/components/PlaceHolderText.tsx","src/features/new-incident/components/IncidentInput.tsx","src/components/layout/index.tsx","src/components/left-menu/index.tsx","src/features/incident-details/index.tsx","src/features/all-incidents/index.tsx","src/navigation/index.tsx","App.tsx","web-build/register-service-worker.js"],"names":["Endpoint","RepositoryImpl","service","FetchService","helper","this","createHelper","request","createHelpRequest","matching","findHelpers","notifyHelpers","getHelpRequests","post","Helper","HelpRequest","DEFAULT_LOC","lat","Math","floor","latitude","long","longitude","helperCount","Promise","resolve","count","skills","skill","id","name","chance","integer","min","max","email","phone","country","mobile","postcode","Chance","length","arr","Array","i","mockHelper","MOCKED_HELPREQUESTS","created_at","date_start","roles","helpers","mockHelpers","get","endpoint","mockValue","body","response","HOST","ENDPOINT_PREFIX","CurrentHelperNumber","props","useState","numHelpers","setNumHelpers","helpRequest","stateHelpRequest","repository","console","log","helperSearchDefinition","useEffect","a","async","undefined","random","fetchNumHelpers","Text","style","fontSize","CurrentHelperNumberCircle","View","flex","justifyContent","alignItems","padding","backgroundColor","width","height","borderRadius","borderWidth","render","MessageInfoBox","RolesPicker","role","checked","setRoles","updateHelpRequest","finalRoles","filter","item","map","index","newHelpRequest","setHelpRequest","data","renderItem","flexDirection","CheckBox","value","marginRight","onValueChange","newArray","slice","checkRole","SkillsPicker","setSkills","finalSkills","checkSkill","SectionHeadline","children","FieldWithHeading","styles","container","heading","TextInput","onChangeText","text","placeholder","onEndEditing","StyleSheet","create","Geocoder","init","DEFAULT_LATLONG","lng","AdressMapView","coords","setCoords","adress","adressString","from","then","json","location","results","geometry","updateHelperSearchDefinition","catch","error","warn","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","position","top","left","right","bottom","initialRegion","latitudeDelta","longitudeDelta","region","Marker","coordinate","title","description","SubmitButton","TouchableOpacity","onPress","alert","LinearGradient","start","end","colors","margin","paddingHorizontal","textAlign","color","DateInput","date","setDate","prev","marginLeft","borderColor","type","onChange","e","target","PlaceHolderText","IncidentInput","requiredSkills","helperSearchDef","setHelperSearchDef","setRender","onAdressChange","modalCloseComponent","String","maxWidth","Layout","isVisible","setIsVisible","renderButton","button","leftContainer","leftContent","modalContentContainer","midContainer","midContent","borderRightWidth","borderRightColor","rightContainer","LeftMenu","state","loading","dataSource","loadHelpRequests","nextDataSource","val","isSelected","setState","selectItem","textStyle","selectedItem","paddingLeft","FlatList","hr","v","Component","fontWeight","HelpRequestDetails","h","tableData","buttonContainer","Button","Alert","paddingTop","paddingBottom","borderStyle","flexArr","head","wrapper","heightArr","row","paddingRight","helperListItem","tableTitle","AllIncidents","ref","details","Navigator","createStackNavigator","createBrowserApp","App","navigator","window","addEventListener","serviceWorker","register","scope","info"],"mappings":"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","file":"static/js/app.79652bb4.chunk.js","sourcesContent":["import Chance from 'chance';\n\nexport interface Repository {\n    /**\n     * create a helper\n     *\n     * @param helper the helper to be created. Set id: null to create new user\n     */\n    createHelper(helper: Helper): Promise<Helper>;\n\n    /**\n     * create help request\n     *\n     * @param request the HelpRequest to be created\n     */\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest>;\n\n    /**\n     * find helpers\n     *\n     * @param matching The filter to apply\n     */\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers>;\n\n    /**\n     * notify helpers\n     *\n     * @param matching The filter to apply\n     */\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any>;\n\n    getHelpRequests(): Promise<HelpRequest[]>\n}\n\n/**\n * Currently, this is just a proxy for Service. We could implement some fancy caching strategies here...\n */\nexport class RepositoryImpl implements Repository {\n\n    constructor(private service: Service = new FetchService()) {\n    }\n\n    createHelper(helper: Helper): Promise<Helper> {\n        return this.service.createHelper(helper);\n    }\n\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest> {\n        return this.service.createHelpRequest(request);\n    }\n\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers> {\n        // TODO: we could add some fancy caching strategies here and only fetch using `service` if data doesn't exist or expired\n        return this.service.findHelpers(matching);\n    }\n\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any> {\n        return this.service.notifyHelpers(matching);\n    }\n\n    getHelpRequests(): Promise<HelpRequest[]> {\n        return this.service.getHelpRequests();\n    }\n\n}\n\nenum Endpoint {\n    Helper = \"helper\",\n    HelpRequest = \"HelpRequest\"\n}\n\n/**\n * A service that can be used to fetch data\n */\nexport interface Service {\n    /**\n     * Create a helper\n     *\n     * @param helper\n     */\n    createHelper(helper: Helper): Promise<Helper>\n\n    /**\n     * Create a help request\n     * @param request\n     */\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest>\n\n    /**\n     * find helpers for request\n     * @param matching The filter to apply\n     */\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers>;\n\n    /**\n     * notify helpers matching a previously specified search definition\n     * @param matching The filter to apply\n     */\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any>;\n\n    getHelpRequests(): Promise<HelpRequest[]>\n}\n\n/**\n * An object which represents a query for helpers\n */\nexport interface HelperSearchDefinition {\n    /**\n     * the event's latitude\n     */\n    latitude: number;\n    /**\n     * the event's longitude\n     */\n    longitude: number;\n    /**\n     * required skills for this event\n     */\n    requiredSkills: Skill[];\n}\n\nclass FetchService implements Service {\n\n    static HOST = \"http://127.0.0.1/\";\n    static ENDPOINT_PREFIX = \"api/v1/\";\n\n    createHelper(helper: Helper): Promise<Helper> {\n        return this.post(Endpoint.Helper, helper);\n    }\n\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest> {\n        return this.post(Endpoint.HelpRequest, request);\n    }\n\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers> {\n        const DEFAULT_LOC = { lat: 52.5186, lng: 13.3761 };\n\n        let lat = Math.floor(matching.latitude * 10000) / 10000;\n        let long = Math.floor(matching.longitude * 10000) / 10000;\n        let helperCount = (DEFAULT_LOC.lat == lat && DEFAULT_LOC.lng == long) ? 12 : 7;\n\n        return Promise.resolve({\n            count: helperCount,\n            skills: [\n                {\n                    skill: { id: 4, name: \"Erste Hilfe\" },\n                    count: 2\n                },\n                {\n                    skill: { id: 2, name: \"Altenpflege\" },\n                    count: 1\n                }\n            ]\n        });\n    }\n\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any> {\n        return Promise.resolve();\n    }\n\n    private mockHelper(chance: Chance): Helper {\n        return {\n            id: chance.integer({ min: 1, max: 100000 }),\n            name: chance.name(),\n            email: chance.email(),\n            phone: chance.phone({ country: 'uk', mobile: true }),\n            postcode: chance.postcode()\n        }\n    }\n\n    private mockHelpers(): Helper[] {\n        let chance = new Chance();\n\n        let length = chance.integer({ min: 2, max: 20 });\n\n        let arr = new Array(length);\n\n        for (let i = 0; i < length; ++i) {\n            arr[i] = this.mockHelper(chance);\n        }\n        return arr;\n    }\n\n    getHelpRequests(): Promise<HelpRequest[]> {\n        const MOCKED_HELPREQUESTS = [\n            {\n                id: 1,\n                name: \"Am Tannenbusch 13\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: this.mockHelpers()\n            },\n            {\n                id: 2,\n                name: \"Rapsacker 27\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: this.mockHelpers()\n            },\n            {\n                id: 3,\n                name: \"Am Teich 4\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: this.mockHelpers()\n            },\n            {\n                id: 4,\n                name: \"Unter den Linden 27\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: this.mockHelpers()\n            },\n        ];\n        return this.get(Endpoint.HelpRequest, MOCKED_HELPREQUESTS);\n    }\n\n    private get<T>(endpoint: Endpoint, mockValue: T): Promise<T> {\n        return Promise.resolve(mockValue)\n    }\n\n    private post<R>(endpoint: Endpoint, body: any): Promise<R> {\n        // just act as if id was set by the backend :)\n        let response = Object.assign({}, body);\n        response.id = 1;\n        return Promise.resolve(response);\n\n        // TODO: actually perform network request\n\n        /*return fetch(RepositoryImpl.HOST + RepositoryImpl.ENDPOINT_PREFIX + endpoint.toString(), {\n            body: body,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json() as Promise<R>)*/\n    }\n\n}\n\nexport default RepositoryImpl;\n","import React, { useState, useEffect } from \"react\";\nimport { Text } from \"react-native\";\nimport RepositoryImpl, {\n  Repository,\n  HelperSearchDefinition\n} from \"../../../repository/repository\";\n\nexport interface Props {\n  helpRequest: HelpRequest,\n  helperSearchDefinition: HelperSearchDefinition,\n  fontSize: number,\n  render: boolean,\n}\n\n/**\n * Current Helper number displays the number of helpers, given\n * a request (to which the number matches)\n */\nexport default function CurrentHelperNumber(props: Props) {\n  const [numHelpers, setNumHelpers] = useState(0);\n  const [stateHelpRequest] = useState(props.helpRequest);\n\n  let repository: Repository = new RepositoryImpl();\n\n  console.log(\"Stage 2\");\n      console.log(props.helperSearchDefinition);\n  useEffect(() => {\n    async function fetchNumHelpers() {\n      \n      if (props.helperSearchDefinition) {\n        let helpRequest: HelpRequest = props.helpRequest;\n        let helpers = await repository.findHelpers(\n          props.helperSearchDefinition\n        );\n\n        if (\n          helpRequest.skills === undefined ||\n          helpRequest.skills.length == 0\n        ) {\n          setNumHelpers(helpers.count);\n        } else if (helpRequest.skills.length >= 2) {\n          setNumHelpers(1);\n        } else {\n          setNumHelpers(Math.floor(helpers.count / (1 + Math.random() * 4)));\n        }\n      }\n    }\n    fetchNumHelpers();\n  }, [stateHelpRequest.skills, props.helperSearchDefinition.latitude]);\n\n  /* TODO: for reuse add modifiable style */\n  return <Text style={{ fontSize: props.fontSize }}>{numHelpers}</Text>;\n}\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport CurrentHelperNumber from \"./CurrentHelperNumber\";\nimport { HelperSearchDefinition } from \"../../../repository/repository\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  helperSearchDefinition: HelperSearchDefinition;\n  render: boolean;\n}\n\n/**\n * Wraps the helper number in a circle for display\n * @param props\n */\nexport default function CurrentHelperNumberCircle(props: Props) {\n  console.log(\"Stage 1. helpersearchdef\");\n  console.log(props.helperSearchDefinition);\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        padding: 5\n      }}\n    >\n      <View\n        style={{\n          backgroundColor: \"grey\",\n          width: 100,\n          height: 100,\n          borderRadius: 100 / 2,\n          borderWidth: 3,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <CurrentHelperNumber\n          helpRequest={props.helpRequest}\n          helperSearchDefinition={props.helperSearchDefinition}\n          render={props.render}\n          fontSize={75}\n        />\n      </View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Text } from \"react-native\";\n\n/**\n * Text Box, which tells the user to create a message\n * @param props\n */\nexport default function MessageInfoBox() {\n  return (\n    <Text style={{ flex: 3 }}>\n      Melde dich jetzt bei{\" \"}\n      {/* <CurrentHelperNumber\n                helpRequest={props.helpRequest}\n                fontSize={30}\n              />{\" \"} */}\n      potentiellen Helfern in deiner Nähe. Beschreibe in deiner Nachricht den\n      Einsatz möglichst genau.\n    </Text>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Text, View, CheckBox } from \"react-native\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  setHelpRequest: any;\n}\n\n\n/**\n * Overview over available roles to pick\n * On selection, the checkbox will give information about \n * the state. Further, the parents HelpRequests Roles Array will\n * be updated\n * TODO: replace with endpoints roles from db.\n * @param props \n */\nexport default function RolesPicker(props: Props) {\n  const [roles, setRoles] = useState([\n    { role: { id: 0, name: \"Pfleger*in\" }, checked: false },\n    { role: { id: 1, name: \"Reinigungskraft\" }, checked: false },\n    { role: { id: 2, name: \"Sanitäter\" }, checked: false },\n    { role: { id: 3, name: \"Noch mehr\" }, checked: false }\n  ]);\n\n  /** helper function for the check boxes */\n  const checkRole = (item, value) => {\n    let prev = roles;\n    let newArray = prev.slice();\n    newArray[item.role.id].checked = value;\n    setRoles(newArray);\n    updateHelpRequest();\n  };\n\n  /** notify state Wrapper (IncidentInput) that the request changed */\n  const updateHelpRequest = () => {\n    let selected = roles.filter(item => {\n      return item.checked === true;\n    });\n    let finalRoles = selected.map( (item, index) => {return item.role});\n    let newHelpRequest = props.helpRequest;\n    newHelpRequest.roles = finalRoles;\n    props.setHelpRequest(newHelpRequest);\n  };\n\n  return (\n    <View style={{ flex: 1, backgroundColor: \"white\" }}>\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"flex-start\",\n          alignItems: \"flex-start\"\n        }}\n      >\n        <Text>Rollen</Text>\n      </View>\n      <View style={{ flex: 10 }}>\n        <FlatList\n          data={roles}\n          renderItem={({ item }) => (\n            <View style={{ flex: 1, flexDirection: \"row\", padding: 5 }}>\n              <CheckBox\n                value={item.checked}\n                style={{marginRight: 5}}\n                onValueChange={value => {\n                  checkRole(item, value);\n                }}\n              />\n              <Text>{item.role.name}</Text>\n            </View>\n          )}\n        />\n      </View>\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Text, View, CheckBox } from \"react-native\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  setHelpRequest: any;\n}\n\n/**\n * Overview over available skills to pick\n * On selection, the checkbox will give information about \n * the state. Further, the parents HelpRequests Skills Array will\n * be updated\n * @param props \n */\nexport default function SkillsPicker(props: Props) {\n  const [skills, setSkills] = useState([\n    { skill: { id: 0, name: \"Erste Hilfe\" }, checked: false },\n    { skill: { id: 1, name: \"Altenpflege\" }, checked: false },\n    { skill: { id: 2, name: \"Noch mehr\" }, checked: false }\n  ]);\n\n  /** helper function for the check boxes */\n  const checkSkill = (item, value) => {\n    let prev = skills;\n    let newArray = prev.slice();\n    newArray[item.skill.id].checked = value;\n    setSkills(newArray);\n    updateHelpRequest();\n  };\n\n  /** notify state Wrapper (IncidentInput) that the request changed */\n  const updateHelpRequest = () => {\n    let selected = skills.filter(item => {\n      return item.checked === true;\n    });\n    let finalSkills = selected.map( (item, index) => {return item.skill});\n    let newHelpRequest = props.helpRequest;\n    newHelpRequest.skills = finalSkills;\n    //console.log(newHelpRequest);\n    props.setHelpRequest(newHelpRequest);\n  };\n\n  return (\n    <View style={{ flex: 1, backgroundColor: \"white\" }}>\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"flex-start\",\n          alignItems: \"flex-start\"\n        }}\n      >\n        <Text>Skills</Text>\n      </View>\n      <View style={{ flex: 10 }}>\n        <FlatList\n          data={skills}\n          renderItem={({ item }) => (\n            <View style={{ flex: 1, flexDirection: \"row\",padding: 5}}>\n              <CheckBox\n                value={item.checked}\n                style={{marginRight: 5}}\n                onValueChange={value => {\n                  checkSkill(item, value);\n                }}\n              />\n              <Text>{item.skill.name}</Text>\n            </View>\n          )}\n        />\n      </View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Text, View} from \"react-native\";\n\nexport interface Props {\n  children: string;\n}\n\n/**\n * Simple Headline\n * @param props \n */\nexport default function SectionHeadline(props: Props) {\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"flex-start\" }}>\n      <Text\n        style={{\n          fontSize: 30\n        }}\n      >\n        {props.children}\n      </Text>\n    </View>\n  );\n}\n","import React from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput\n} from \"react-native\";\n\nexport interface Props {\n  heading: string;\n  placeholder: string;\n  onChangeText: (text: string) => void,\n  onEndEditing: () => void,\n}\n\n/**\n * Just an input field with a headline\n * @param props \n */\nexport default function FieldWithHeading(props: Props) {\n  return (\n    <View style={styles.container}>\n      <View style={{ flex: 1 }}>\n        <Text style={{ flex: 1 }}>{props.heading}</Text>\n      </View>\n      <View style={{ flex: 1 }}>\n        <TextInput\n          onChangeText={text => props.onChangeText(text)}\n          style={{ borderRadius: 2, borderWidth: 3, padding: 5 }}\n          placeholder={props.placeholder}\n          onEndEditing={props.onEndEditing}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 5,\n    flexDirection: \"column\",\n    backgroundColor: \"#fff\"\n  }\n});\n","import React, { useState, useEffect } from \"react\";\nimport MapView from \"react-native-maps\";\nimport Geocoder from \"react-native-geocoding\";\nimport { HelperSearchDefinition } from \"../../../repository/repository\";\nimport { View } from \"react-native\";\n\nexport interface Props {\n  adressString: string;\n  helpRequest: HelpRequest;\n  updateHelpRequest: any;\n  updateHelperSearchDefinition: (HelperSearchDefinition) => void;\n}\n\nGeocoder.init(\"AIzaSyC9cFDJwcroS2OcOO19SVJdYN9OQ6RYBWI\");\n\n/**\n * starting location\n */\nconst DEFAULT_LATLONG = { lat: -7.30599, lng: 111 };\n\n/**\n * Renders a *parent-filling* GoogleMap. Listens on the adressString\n * Prop in order to rerender to new Adress, while updating helpRequest\n * with the new coordinates in Order to communicate with the backend\n * @param props\n */\nexport default function AdressMapView(props: Props) {\n  let [coords, setCoords] = useState(DEFAULT_LATLONG);\n  const getGeocodeFromAdress = async (adress: String) => {\n    Geocoder.from(adress)\n      .then(json => {\n        var location = json.results[0].geometry.location;\n        console.log(location);\n        setCoords(location);\n        props.updateHelperSearchDefinition({\n          latitude: location.lat,\n          longitude: location.lng,\n          skills: props.helpRequest.skills\n        });\n      })\n      .catch(error => console.warn(error));\n  };\n\n  useEffect(() => {\n    getGeocodeFromAdress(props.adressString);\n  }, [props.adressString]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: \"row\",\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: { width: 0, height: 1 },\n        shadowOpacity: 0.8,\n        shadowRadius: 3,\n        elevation: 3\n      }}\n    >\n      <MapView\n        style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\n        initialRegion={{\n          latitude: coords.lat,\n          longitude: coords.lng,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        }}\n        region={{\n          latitude: coords.lat,\n          longitude: coords.lng,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        }}\n      >\n        <MapView.Marker\n          coordinate={{ latitude: coords.lat, longitude: coords.lng }}\n          title={props.adressString}\n          description={\"This is your location\"}\n        />\n      </MapView>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport { LinearGradient } from \"expo-linear-gradient\";\n\n/**\n * Text Box, which tells the user to create a message\n * @param props\n */\nexport default function SubmitButton() {\n  return (\n    <TouchableOpacity onPress={() => alert(\"submit\")}>\n      <LinearGradient\n        start={[0, 0.5]}\n        end={[1, 0.5]}\n        colors={[\"#000\", \"red\"]}\n        style={{ borderRadius: 5 }}\n      >\n        <View\n          style={{\n            margin: 1,\n            backgroundColor: \"white\",\n            borderRadius: 5\n          }}\n        >\n          <Text\n            style={{\n              margin: 4,\n              paddingHorizontal: 6,\n              textAlign: \"center\",\n              backgroundColor: \"white\",\n              color: \"#000\",\n              fontSize: 30\n            }}\n          >\n            Jetzt anfordern\n          </Text>\n        </View>\n      </LinearGradient>\n    </TouchableOpacity>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View, Text } from \"react-native\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  updateHelpRequest: (HelpRequest) => void;\n}\n\n/**\n * Simple Date Picker in html\n * TODO: Transform this html component into react\n * @param props\n */\nexport default function DateInput(props: Props) {\n  /** state stored user input */\n  let [date, setDate] = useState<string>();\n\n  useEffect(() => {\n    /* if date is changed, update parents HelpRequest */\n    let prev = props.helpRequest;\n    prev.created_at = date;\n    props.updateHelpRequest(prev);\n    console.log(\"Date\");\n    console.log(prev);\n  }, [date]);\n\n  return (\n    <View style={{ flex: 1 , marginLeft: 5}}>\n      <View style={{ flex: 1 }}>\n        <Text>Datum</Text>\n      </View>\n      <View style={{ flex: 1 }}>\n        <form>\n          <input\n            style={{ borderWidth: 3, padding: 5, borderColor: \"black\" }}\n            type=\"date\"\n            value={date}\n            onChange={e => setDate(e.target.value)}\n          />\n        </form>\n      </View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { HelperSearchDefinition } from \"../../../repository/repository\";\n\nexport interface Props {\n  helperSearchDefinition: HelperSearchDefinition;\n}\n\n/**\n * Placeholder Text beneath Map\n * @param props\n */\nexport default function PlaceHolderText(props: Props) {\n  return (\n    <View style={{ flex: 1, justifyContent: \"flex-start\" }}>\n      <Text>\n        Versuche einmal mal am Bundestag (Reichstagsgebäude) nach Helfern zu\n        suchen.\n      </Text>\n      <Text>\n        Momentane Koordinaten: ({props.helperSearchDefinition.latitude},{\" \"}\n        {props.helperSearchDefinition.longitude}).\n      </Text>\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { HelperSearchDefinition } from \"../../../repository/repository\";\nimport CurrentHelperNumberCircle from \"./CurrentHelperNumberCircle\";\nimport MessageInfoBox from \"./MessageInfoBox\";\nimport RolesPicker from \"./RolesPicker\";\nimport SkillsPicker from \"./SkillsPicker\";\nimport SectionHeadline from \"./SectionHeadline\";\nimport FieldWithHeading from \"./FieldWithHeading\";\nimport AdressMapView from \"./AdressMapView\";\nimport SubmitButton from \"./SubmitButton\";\nimport DateInput from \"./DateInput\";\nimport PlaceHolderText from \"./PlaceHolderText\";\n\nexport interface Props {\n  modalCloseComponent: JSX.Element;\n}\n\n/**\n * This part should be showing filter options and the number of\n * available helpers matching the criteria\n * If the sorting is sufficient, you should post\n */\nexport default function IncidentInput(props: Props) {\n  /** state saved HelpRequest */\n  let [helpRequest, setHelpRequest] = useState<HelpRequest>({\n    id: 3,\n    name: \"Babuschka Boi\",\n    created_at: \"\",\n    date_start: \"\",\n    roles: [],\n    skills: [],\n    helpers: []\n  });\n\n  /** state saved helperSearchDefinition */\n  let [helperSearchDef, setHelperSearchDef] = useState<HelperSearchDefinition>({\n    latitude: 52,\n    longitude: 21,\n    requiredSkills: []\n  });\n\n  /** ugly hack = temporary workaround :) */\n  let [render, setRender] = useState<boolean>(false);\n\n  /** user input, seperate save to pass to adress */\n  let [adressString, onAdressChange] = useState<string>();\n\n  /**\n   * Setter, for updating the state-saved helpRequest\n   * @param helpRequest\n   */\n  const updateHelpRequest = (helpRequest: HelpRequest) => {\n    setHelpRequest(helpRequest);\n    /* ugly hack TODO: better state management, need to wait for final interfaces */\n    setRender(!render);\n    console.log(helpRequest);\n  };\n\n  return (\n    <View style={styles.container}>\n      {props.modalCloseComponent}\n      <View style={{ flex: 1, flexDirection: \"row\" }}>\n        <SectionHeadline>1. Daten eingeben</SectionHeadline>\n        <SectionHeadline>2. Verfügbare Helfer</SectionHeadline>\n      </View>\n      <View style={{ flex: 10, flexDirection: \"row\" }}>\n        {/* 1. card */}\n        <View style={{ flex: 1 }}>\n          <View style={{ flex: 1, flexDirection: \"column\" }}>\n            <View\n              style={{\n                flex: 2,\n                backgroundColor: \"white\",\n                justifyContent: \"center\",\n                padding: 5\n              }}\n            >\n              <View style={{ flex: 1, flexDirection: \"row\" }}>\n                <View style={{ flex: 1 }}>\n                  <FieldWithHeading\n                    heading={\"Titel\"}\n                    placeholder={\"Titel\"}\n                    onChangeText={text => {\n                      let prev = helpRequest;\n                      prev.name = String(text);\n                      console.log(prev);\n                      setHelpRequest(prev);\n                    }}\n                    onEndEditing={() => {}}\n                  />\n                  <FieldWithHeading\n                    heading={\"Ort\"}\n                    placeholder={\"Ort\"}\n                    onChangeText={onAdressChange}\n                    onEndEditing={() => {}}\n                  />\n                </View>\n                <View style={{ flex: 1 }}>\n                  <DateInput\n                    helpRequest={helpRequest}\n                    updateHelpRequest={updateHelpRequest}\n                  />\n                  <View\n                    style={{ flex: 1, justifyContent: \"center\" }}\n                  >\n                    <FieldWithHeading\n                      heading={\"Wie lange?\"}\n                      placeholder={\"Anzahl an Tagen eingeben\"}\n                      onChangeText={() => {}}\n                      onEndEditing={() => {}}\n                    />\n                  </View>\n                </View>\n              </View>\n              <AdressMapView\n                adressString={adressString}\n                helpRequest={helpRequest}\n                updateHelpRequest={updateHelpRequest}\n                updateHelperSearchDefinition={setHelperSearchDef}\n              />\n            </View>\n            <PlaceHolderText helperSearchDefinition={helperSearchDef} />\n          </View>\n        </View>\n        {/* 2. card */}\n        <View style={{ flex: 1, flexDirection: \"column\" }}>\n          <View style={{ flex: 2, padding: 5 }}>\n            <View style={{ flex: 3, flexDirection: \"row\" }}>\n              <CurrentHelperNumberCircle\n                helpRequest={helpRequest}\n                helperSearchDefinition={helperSearchDef}\n                render={render}\n              />\n              <RolesPicker\n                helpRequest={helpRequest}\n                setHelpRequest={setHelpRequest}\n              />\n              <SkillsPicker\n                helpRequest={helpRequest}\n                setHelpRequest={updateHelpRequest}\n              />\n            </View>\n          </View>\n          <View style={{ flex: 2 }}>\n            <View style={{ flex: 5, flexDirection: \"row\" }}>\n              <View style={{ flex: 1, backgroundColor: \"white\", padding: 10 }}>\n                <SectionHeadline>Helfer anfordern</SectionHeadline>\n                <MessageInfoBox />\n                <SubmitButton />\n              </View>\n            </View>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    maxWidth: 1024,\n    flexDirection: \"column\",\n    backgroundColor: \"white\"\n  }\n});\n","import React, { useState } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport Modal from \"modal-enhanced-react-native-web\";\nimport IncidentInput from \"../../features/new-incident/components/IncidentInput\";\n\nexport interface Props {\n  leftContent: Element;\n  midContent: React.Component;\n  rightContent: React.Component;\n}\n\n/**\n * layout is the main container. It create 2 or 3 columns and also\n * wraps the modal for the input\n * @param props\n */\nexport default function Layout(props: Props) {\n  /** modal visibility state */\n  let [isVisible, setIsVisible] = useState<boolean>(false);\n\n  /**\n   * Button to toggle the modal overlay\n   * @param text Button Text\n   * @param onPress callback\n   */\n  let renderButton = (text: string, onPress: () => void) => (\n    <TouchableOpacity onPress={onPress}>\n      <View style={styles.button}>\n        <Text>{text}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  /**\n   * create the content of the modal overlay\n   */\n  let renderModalContent = () => {\n    return (\n      <View style={styles.modalContentContainer}>\n        <IncidentInput\n          modalCloseComponent={renderButton(\"Close\", () => {\n            setIsVisible(false);\n          })}\n        />\n      </View>\n    );\n  };\n  return (\n    <View style={styles.container}>\n      <View style={styles.leftContainer}>\n        {props.leftContent}\n        {renderButton(\"+\", () => {\n          setIsVisible(true);\n        })}\n        <Modal isVisible={isVisible}>{renderModalContent()}</Modal>\n      </View>\n      <View style={styles.midContainer}>{props.midContent}</View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\"\n  },\n  leftContainer: {\n    flex: 1,\n    borderRightWidth: 1,\n    borderRightColor: \"#00000000d3\"\n  },\n  midContainer: {\n    flex: 4,\n    flexDirection: \"column\"\n  },\n  rightContainer: {\n    flex: 1\n  },\n  modalContentContainer: {\n    flex: 1,\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    padding: 22,\n    borderRadius: 4,\n    borderColor: \"rgba(0, 0, 0, 0.1)\"\n  },\n  button: {\n    flex: 1,\n    backgroundColor: \"lightblue\",\n    padding: 12,\n    margin: 16,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: 4,\n    borderColor: \"rgba(0, 0, 0, 0.1)\"\n  }\n});\n","import React, {Component} from \"react\";\nimport {FlatList, ListRenderItemInfo, Text, TouchableOpacity, View} from \"react-native\";\nimport {Repository} from \"../../repository/repository\";\n\ninterface HelpRequestData {\n    request: HelpRequest\n    isSelected: boolean\n}\n\ninterface LeftMenuState {\n    loading: boolean\n    dataSource: HelpRequestData[]\n}\n\ninterface LeftMenuProps {\n    repository: Repository\n    selectItem: ((HelpRequest) => void)\n}\n\nexport default class LeftMenu extends Component<LeftMenuProps, LeftMenuState> {\n    constructor(props: LeftMenuProps) {\n        super(props);\n        this.state = { loading: false, dataSource: [] };\n    }\n\n    componentDidMount(): void {\n        this.loadHelpRequests();\n    }\n\n    private selectItem(data: ListRenderItemInfo<HelpRequestData>) {\n        let nextDataSource = this.state.dataSource.map(val => {\n            val.isSelected = val.request.id == data.item.request.id;\n            return val;\n        });\n        this.setState({ dataSource: nextDataSource });\n        this.props.selectItem(data.item.request);\n    }\n\n    renderItem(data: ListRenderItemInfo<HelpRequestData>) {\n        // TODO: TouchableOpacity -> Link?\n        // TODO: Highlight selected\n        let textStyle = data.item.isSelected ? styles.selectedItem : {};\n        return (\n            <TouchableOpacity onPress={() => this.selectItem(data)}>\n                <View style={{padding: 8, paddingLeft: 16}}>\n                    <Text style={textStyle}>\n                        {data.item.request.name}\n                    </Text>\n                    <Text style={textStyle}>\n                        {data.item.request.created_at}\n                    </Text>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n\n    render() {\n        return (\n            <FlatList\n                data={this.state.dataSource}\n                renderItem={item => this.renderItem(item)} />\n        );\n    }\n\n    private loadHelpRequests() {\n        this.setState({ loading: true });\n        this.props\n            .repository\n            .getHelpRequests()\n            .then(hr => this.setState({ loading: false, dataSource: hr.map(v => { return { request: v, isSelected: false } })}));\n    }\n}\n\nconst styles = {\n    selectedItem: {\n        fontWeight: \"bold\"\n    }\n};\n","import {Component, default as React} from \"react\";\nimport {View, Text, Button, Alert} from \"react-native\";\nimport { Table, TableWrapper, Row, Rows, Col } from 'react-native-table-component';\n\n/**\n * State representing underlying data of IncidentDetails\n */\ninterface IncidentDetailsState {\n    /**\n     * The HelpRequest displayed\n     */\n    data?: HelpRequest;\n}\n\n/**\n * Props for IncidentDetails\n */\ninterface IncidentDetailsProps {\n}\n\n/**\n * A Component which displays a HelpRequest\n */\nexport default class HelpRequestDetails extends Component<IncidentDetailsProps, IncidentDetailsState> {\n\n    public setHelpRequest(h: HelpRequest) {\n        this.setState({ data: h });\n    }\n\n    constructor(props: IncidentDetailsProps) {\n        super(props);\n        this.state = { data: null };\n    }\n\n    render() {\n        let state = this.state;\n        if (state == null || state.data == null) {\n            return (\n                <View style={styles.container}>\n                    <Text style={styles.title}>Hey! Bitte wähle links ein Hilfegesuch aus</Text>\n                    <Text>Die Daten werden dann hier angezeigt</Text>\n                </View>\n            );\n        }\n        let tableHeaders = [ \"Name\", \"E-Mail\", \"Telefon\" ];\n        let tableData = state.data.helpers.map(h => [ h.email, h.phone ]);\n        return (\n            <View style={styles.container}>\n                <Text style={styles.title}>{this.state.data.name}</Text>\n                <Text>{this.state.data.date_start}</Text>\n                <View style={styles.buttonContainer}>\n                    <Button\n                        title=\"Download PDF\"\n                        onPress={() => Alert.alert('Left button pressed')}\n                    />\n                    <View\n                    style={{width: 16}}/>\n                    <Button\n                        title=\"Download CSV\"\n                        onPress={() => Alert.alert('Right button pressed')}\n                    />\n                </View>\n                <Text style={{paddingTop: 16, paddingBottom: 16}}>Es haben sich {state.data.helpers.length} potenzielle Helfer:innen auf dein Gesuch gemeldet</Text>\n                <Table borderStyle={{borderWidth: 1}}>\n                    <Row data={tableHeaders} flexArr={[1, 1, 1]} style={styles.head} textStyle={styles.text}/>\n                    <TableWrapper style={styles.wrapper}>\n                        <Col data={state.data.helpers.map(h => h.name)} style={styles.title} heightArr={[28,28]} textStyle={styles.text}/>\n                        <Rows data={tableData} flexArr={[1, 1]} style={styles.row} textStyle={styles.text}/>\n                    </TableWrapper>\n                </Table>\n            </View>\n        );\n    }\n}\n\nconst styles = {\n    container: {\n        flex: 1,\n        paddingLeft: 16,\n        paddingRight: 16\n    },\n    title: {\n        fontSize: 48,\n        fontWeight: 'bold'\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    helperListItem: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    head: {  height: 40 },\n    wrapper: { flexDirection: 'row' },\n    tableTitle: { flex: 1, backgroundColor: '#f6f8fa' },\n    row: {  height: 28  },\n    text: { textAlign: 'center' }\n};\n","import React, {Component} from \"react\";\nimport Layout from \"../../components/layout\";\nimport LeftMenu from \"../../components/left-menu\";\nimport RepositoryImpl from \"../../repository/repository\";\nimport HelpRequestDetails from \"../incident-details\";\n\nconst repository = new RepositoryImpl();\n\nexport default class AllIncidents extends Component {\n\n  private details: HelpRequestDetails;\n  private leftContent = (<LeftMenu repository={repository} selectItem={item => this.selectItem(item)}/>);\n  private midContent = (<HelpRequestDetails ref={ref => this.details = ref}/>);\n\n  selectItem(item: HelpRequest) {\n    this.details.setHelpRequest(item);\n  }\n\n  render() {\n    return (\n        <Layout\n            leftContent={this.leftContent}\n            midContent={this.midContent}\n        />\n    );\n  }\n}\n","import { createStackNavigator } from \"react-navigation-stack\";\nimport {createBrowserApp} from '@react-navigation/web';\nimport AllIncidents from \"../features/all-incidents\";\n\nconst Navigator = createStackNavigator(\n  {\n    \"MedStaff+\": AllIncidents\n  }\n);\n\nconst container = createBrowserApp(Navigator);\n\nexport default container;\n\n","import React from \"react\";\nimport Navigator from \"./src/navigation\";\n\n/**\n * Application entry point\n *\n * @constructor\n */\nexport default function App() {\n    return <Navigator />\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/experten-app/expo-service-worker.js', { scope: '/experten-app/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}